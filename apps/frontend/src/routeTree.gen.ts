/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as AboutImport } from './routes/about'
import { Route as ProtectedImport } from './routes/_protected'
import { Route as ProtectedIndexImport } from './routes/_protected/index'
import { Route as ProtectedRolesImport } from './routes/_protected/roles'
import { Route as ProtectedActivityImport } from './routes/_protected/activity'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedRoute = ProtectedImport.update({
  id: '/_protected',
  getParentRoute: () => rootRoute,
} as any)

const ProtectedIndexRoute = ProtectedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedRolesRoute = ProtectedRolesImport.update({
  id: '/roles',
  path: '/roles',
  getParentRoute: () => ProtectedRoute,
} as any)

const ProtectedActivityRoute = ProtectedActivityImport.update({
  id: '/activity',
  path: '/activity',
  getParentRoute: () => ProtectedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_protected/activity': {
      id: '/_protected/activity'
      path: '/activity'
      fullPath: '/activity'
      preLoaderRoute: typeof ProtectedActivityImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/roles': {
      id: '/_protected/roles'
      path: '/roles'
      fullPath: '/roles'
      preLoaderRoute: typeof ProtectedRolesImport
      parentRoute: typeof ProtectedImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexImport
      parentRoute: typeof ProtectedImport
    }
  }
}

// Create and export the route tree

interface ProtectedRouteChildren {
  ProtectedActivityRoute: typeof ProtectedActivityRoute
  ProtectedRolesRoute: typeof ProtectedRolesRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedActivityRoute: ProtectedActivityRoute,
  ProtectedRolesRoute: ProtectedRolesRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof ProtectedRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/activity': typeof ProtectedActivityRoute
  '/roles': typeof ProtectedRolesRoute
  '/': typeof ProtectedIndexRoute
}

export interface FileRoutesByTo {
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/activity': typeof ProtectedActivityRoute
  '/roles': typeof ProtectedRolesRoute
  '/': typeof ProtectedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_protected': typeof ProtectedRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/_protected/activity': typeof ProtectedActivityRoute
  '/_protected/roles': typeof ProtectedRolesRoute
  '/_protected/': typeof ProtectedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/about' | '/login' | '/activity' | '/roles' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/about' | '/login' | '/activity' | '/roles' | '/'
  id:
    | '__root__'
    | '/_protected'
    | '/about'
    | '/login'
    | '/_protected/activity'
    | '/_protected/roles'
    | '/_protected/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_protected",
        "/about",
        "/login"
      ]
    },
    "/_protected": {
      "filePath": "_protected.tsx",
      "children": [
        "/_protected/activity",
        "/_protected/roles",
        "/_protected/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_protected/activity": {
      "filePath": "_protected/activity.tsx",
      "parent": "/_protected"
    },
    "/_protected/roles": {
      "filePath": "_protected/roles.tsx",
      "parent": "/_protected"
    },
    "/_protected/": {
      "filePath": "_protected/index.tsx",
      "parent": "/_protected"
    }
  }
}
ROUTE_MANIFEST_END */
