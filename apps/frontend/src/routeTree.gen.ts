/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AboutRouteImport } from './routes/about'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index'
import { Route as ProtectedRolesRouteImport } from './routes/_protected/roles'
import { Route as ProtectedPermissionsRouteImport } from './routes/_protected/permissions'
import { Route as ProtectedActivityRouteImport } from './routes/_protected/activity'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedRolesRoute = ProtectedRolesRouteImport.update({
  id: '/roles',
  path: '/roles',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedPermissionsRoute = ProtectedPermissionsRouteImport.update({
  id: '/permissions',
  path: '/permissions',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedActivityRoute = ProtectedActivityRouteImport.update({
  id: '/activity',
  path: '/activity',
  getParentRoute: () => ProtectedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/activity': typeof ProtectedActivityRoute
  '/permissions': typeof ProtectedPermissionsRoute
  '/roles': typeof ProtectedRolesRoute
  '/': typeof ProtectedIndexRoute
}
export interface FileRoutesByTo {
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/activity': typeof ProtectedActivityRoute
  '/permissions': typeof ProtectedPermissionsRoute
  '/roles': typeof ProtectedRolesRoute
  '/': typeof ProtectedIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/_protected/activity': typeof ProtectedActivityRoute
  '/_protected/permissions': typeof ProtectedPermissionsRoute
  '/_protected/roles': typeof ProtectedRolesRoute
  '/_protected/': typeof ProtectedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/about' | '/login' | '/activity' | '/permissions' | '/roles' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/about' | '/login' | '/activity' | '/permissions' | '/roles' | '/'
  id:
    | '__root__'
    | '/_protected'
    | '/about'
    | '/login'
    | '/_protected/activity'
    | '/_protected/permissions'
    | '/_protected/roles'
    | '/_protected/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/roles': {
      id: '/_protected/roles'
      path: '/roles'
      fullPath: '/roles'
      preLoaderRoute: typeof ProtectedRolesRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/permissions': {
      id: '/_protected/permissions'
      path: '/permissions'
      fullPath: '/permissions'
      preLoaderRoute: typeof ProtectedPermissionsRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/activity': {
      id: '/_protected/activity'
      path: '/activity'
      fullPath: '/activity'
      preLoaderRoute: typeof ProtectedActivityRouteImport
      parentRoute: typeof ProtectedRoute
    }
  }
}

interface ProtectedRouteChildren {
  ProtectedActivityRoute: typeof ProtectedActivityRoute
  ProtectedPermissionsRoute: typeof ProtectedPermissionsRoute
  ProtectedRolesRoute: typeof ProtectedRolesRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedActivityRoute: ProtectedActivityRoute,
  ProtectedPermissionsRoute: ProtectedPermissionsRoute,
  ProtectedRolesRoute: ProtectedRolesRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
